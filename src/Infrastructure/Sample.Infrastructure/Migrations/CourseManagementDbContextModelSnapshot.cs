// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sofa.CourseManagement.Infrastructure.Persistence;

#nullable disable

namespace Sofa.CourseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(CourseManagementDbContext))]
    partial class CourseManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstituteId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InstituteId");

                    b.HasIndex("InstituteId1");

                    b.ToTable("Field", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.InstituteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("InstituteUser", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("LessonPlan", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LessonPlanId");

                    b.ToTable("PostBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LessonPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LessonPlanId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LessonPlanId1");

                    b.HasIndex("TermId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Term", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Term", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.UserTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TermId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TermId");

                    b.HasIndex("TermId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserTerm", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.ImagePost", b =>
                {
                    b.HasBaseType("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase");

                    b.ToTable("ImagePost", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.SoundPost", b =>
                {
                    b.HasBaseType("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase");

                    b.ToTable("SoundPost", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.TextPost", b =>
                {
                    b.HasBaseType("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase");

                    b.ToTable("TextPost", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.VideoPost", b =>
                {
                    b.HasBaseType("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase");

                    b.ToTable("VideoPost", (string)null);
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Course", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.Field", null)
                        .WithMany("Courses")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.AgeRange", "AgeRange", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AgeRangeTitle");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("AgeRange");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("AgeRange");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Field", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Institute", null)
                        .WithMany("Fields")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId1");

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("FieldId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("FieldId");

                            b1.ToTable("Field");

                            b1.WithOwner()
                                .HasForeignKey("FieldId");
                        });

                    b.Navigation("Institute");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.InstituteUser", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Institute", "Institute")
                        .WithMany("InstituteUsers")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sofa.CourseManagement.Domain.Users.User", null)
                        .WithMany("InstituteUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sofa.CourseManagement.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Institute");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.LessonPlan", b =>
                {
                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("LessonPlanId");

                            b1.ToTable("LessonPlan");

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.LessonPlanLevel", "Level", b1 =>
                        {
                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LevelTitle");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Level");

                            b1.HasKey("LessonPlanId");

                            b1.ToTable("LessonPlan");

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.Navigation("Level");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.LessonPlan", null)
                        .WithMany("Posts")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("PostBaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("PostBaseId");

                            b1.ToTable("PostBase");

                            b1.WithOwner()
                                .HasForeignKey("PostBaseId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Content", "Content", b1 =>
                        {
                            b1.Property<Guid>("PostBaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Content");

                            b1.HasKey("PostBaseId");

                            b1.ToTable("PostBase");

                            b1.WithOwner()
                                .HasForeignKey("PostBaseId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.ContentType", "ContentType", b1 =>
                        {
                            b1.Property<Guid>("PostBaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ContentTypeTitle");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("ContentType");

                            b1.HasKey("PostBaseId");

                            b1.ToTable("PostBase");

                            b1.WithOwner()
                                .HasForeignKey("PostBaseId");
                        });

                    b.Navigation("Content");

                    b.Navigation("ContentType");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Session", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.LessonPlan", "LessonPlan")
                        .WithMany()
                        .HasForeignKey("LessonPlanId1");

                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.Term", null)
                        .WithMany("Sessions")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("SessionId");

                            b1.ToTable("Session");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.OccurredDate", "OccurredDate", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset?>("Value")
                                .IsRequired()
                                .HasMaxLength(34)
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("OccurredDate");

                            b1.HasKey("SessionId");

                            b1.ToTable("Session");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("LessonPlan");

                    b.Navigation("OccurredDate");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Term", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.Course", null)
                        .WithMany("Terms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("TermId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("TermId");

                            b1.ToTable("Term");

                            b1.WithOwner()
                                .HasForeignKey("TermId");
                        });

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.UserTerm", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.Term", null)
                        .WithMany("UserTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId1");

                    b.HasOne("Sofa.CourseManagement.Domain.Users.User", null)
                        .WithMany("UserTerms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sofa.CourseManagement.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Term");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Institute", b =>
                {
                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("InstituteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("InstituteId");

                            b1.ToTable("Institutes");

                            b1.WithOwner()
                                .HasForeignKey("InstituteId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("InstituteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("InstituteId");

                            b1.ToTable("Institutes");

                            b1.WithOwner()
                                .HasForeignKey("InstituteId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("InstituteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Code");

                            b1.HasKey("InstituteId");

                            b1.ToTable("Institutes");

                            b1.WithOwner()
                                .HasForeignKey("InstituteId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Institutes.ValueObjects.WebsiteUrl", "WebsiteUrl", b1 =>
                        {
                            b1.Property<Guid>("InstituteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("WebsiteUrl");

                            b1.HasKey("InstituteId");

                            b1.ToTable("Institutes");

                            b1.WithOwner()
                                .HasForeignKey("InstituteId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Code");

                    b.Navigation("Title");

                    b.Navigation("WebsiteUrl");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Users.User", b =>
                {
                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.Name", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.Name", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("nvarchar(13)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.UserLevel", "Level", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LevelTitle");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Level");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.UserName", "UserName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("UserName");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Sofa.CourseManagement.Domain.Users.ValueObjects.UserRole", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("RoleTitle");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Role");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("FirstName");

                    b.Navigation("LastName");

                    b.Navigation("Level");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Role");

                    b.Navigation("UserName");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.ImagePost", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", null)
                        .WithOne()
                        .HasForeignKey("Sofa.CourseManagement.Domain.Institutes.Entities.ImagePost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.SoundPost", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", null)
                        .WithOne()
                        .HasForeignKey("Sofa.CourseManagement.Domain.Institutes.Entities.SoundPost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.TextPost", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", null)
                        .WithOne()
                        .HasForeignKey("Sofa.CourseManagement.Domain.Institutes.Entities.TextPost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.VideoPost", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Domain.Institutes.Entities.PostBase", null)
                        .WithOne()
                        .HasForeignKey("Sofa.CourseManagement.Domain.Institutes.Entities.VideoPost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Course", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Field", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.LessonPlan", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Entities.Term", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("UserTerms");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Institutes.Institute", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("InstituteUsers");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Domain.Users.User", b =>
                {
                    b.Navigation("InstituteUsers");

                    b.Navigation("UserTerms");
                });
#pragma warning restore 612, 618
        }
    }
}
